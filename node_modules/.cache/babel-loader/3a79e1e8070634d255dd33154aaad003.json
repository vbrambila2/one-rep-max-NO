{"ast":null,"code":"var _jsxFileName = \"/Users/victorbrambila/one-rep-max/src/containers/AddPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Header from '../components/Header';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { addMovement } from '../actions/index';\nimport { useDispatch } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ErrorSharp } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  addPage: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '100px'\n  },\n  addMovementDiv: {\n    background: '#C4C4C4',\n    fontFamily: 'PT Sans Caption',\n    fontSize: '18px',\n    borderRadius: '10px',\n    padding: '20px',\n    marginTop: '50px',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'right'\n  },\n  movementName: {\n    padding: '10px',\n    margin: '10px'\n  },\n  textBoxColor: {\n    background: 'white',\n    borderRadius: '10px'\n  },\n  movementWeight: {\n    margin: '10px',\n    padding: '10px'\n  },\n  addButton: {\n    width: '50px',\n    borderRadius: '10px',\n    marginLeft: '95px'\n  }\n}));\n\nconst AddPage = props => {\n  _s();\n\n  //const [name, setName] = useState('');\n  //const [weight, setWeight] = useState(0);\n  // const name = useSelector(state => state.move.name);\n  // const weight = useSelector(state => state.move.weight);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const updateText = event => {\n    dispatch(addMovement(event.target.value));\n  };\n\n  const renderError = ({\n    error,\n    touched\n  }) => {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const renderInput = ({\n    input,\n    label,\n    meta\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [label, \":   \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), renderError(meta)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  };\n\n  const onSubmit = formValues => {\n    props.addMovement(formValues);\n  };\n\n  console.log(props.movementName, props.weight);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Add Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.addPage,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.addMovementDiv,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: props.handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"movementName\",\n            component: renderInput,\n            label: \"Movement Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"movementWeight\",\n            component: renderInput,\n            label: \"One Rep Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPage, \"aFWslISJzTtHlU1qXyXYeeBhNak=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = AddPage;\n\nconst mapStateToProps = state => {\n  return {\n    name: state.move.name,\n    weight: state.move.weight\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addMovement: (name, weight) => dispatch(addMovement(name, weight))\n  }; // return {\n  //     moveChanged: (e) => {\n  //         const action = { type: ADD_MOVEMENT, name: e.target.value, weight: e.target.value };\n  //         dispatch(action);\n  //     }\n  // }\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.movementName) {\n    errors.movementName = \"Please enter a Name\";\n  }\n\n  if (!formValues.movementWeight) {\n    errors.movementWeight = \"Please enter a Weight\";\n  }\n\n  return errors;\n}; // export default compose(withConnect)(AddPage);\n\n\nconst formWrap = reduxForm({\n  form: 'addMovementForm',\n  validate: validate\n})(AddPage);\nexport default connect(null, {\n  addMovement\n})(formWrap);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPage\");","map":{"version":3,"sources":["/Users/victorbrambila/one-rep-max/src/containers/AddPage.js"],"names":["React","useState","Header","makeStyles","TextField","InputAdornment","AddCircleIcon","connect","Link","compose","addMovement","useDispatch","Field","reduxForm","ErrorSharp","useStyles","theme","addPage","display","justifyContent","marginTop","addMovementDiv","background","fontFamily","fontSize","borderRadius","padding","flexDirection","textAlign","movementName","margin","textBoxColor","movementWeight","addButton","width","marginLeft","AddPage","props","classes","dispatch","updateText","event","target","value","renderError","error","touched","renderInput","input","label","meta","onSubmit","formValues","console","log","weight","handleSubmit","mapStateToProps","state","name","move","mapDispatchToProps","withConnect","validate","errors","formWrap","form"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA6B,aAA7B;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,MAAMC,SAAS,GAAGZ,UAAU,CAAEa,KAAD,KAAY;AACrCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,OAAO,EAAE,MADJ;AAELC,IAAAA,cAAc,EAAE,QAFX;AAGLC,IAAAA,SAAS,EAAE;AAHN,GAD4B;AAMrCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,UAAU,EAAE,SADA;AAEZC,IAAAA,UAAU,EAAE,iBAFA;AAGZC,IAAAA,QAAQ,EAAE,MAHE;AAIZC,IAAAA,YAAY,EAAE,MAJF;AAKZC,IAAAA,OAAO,EAAE,MALG;AAMZN,IAAAA,SAAS,EAAE,MANC;AAOZF,IAAAA,OAAO,EAAE,MAPG;AAQZS,IAAAA,aAAa,EAAE,QARH;AASZC,IAAAA,SAAS,EAAE;AATC,GANqB;AAiBnCC,EAAAA,YAAY,EAAE;AACZH,IAAAA,OAAO,EAAE,MADG;AAEZI,IAAAA,MAAM,EAAE;AAFI,GAjBqB;AAqBnCC,EAAAA,YAAY,EAAE;AACZT,IAAAA,UAAU,EAAE,OADA;AAEZG,IAAAA,YAAY,EAAE;AAFF,GArBqB;AAyBnCO,EAAAA,cAAc,EAAE;AACdF,IAAAA,MAAM,EAAE,MADM;AAEdJ,IAAAA,OAAO,EAAE;AAFK,GAzBmB;AA6BnCO,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAE,MADA;AAEPT,IAAAA,YAAY,EAAE,MAFP;AAGPU,IAAAA,UAAU,EAAE;AAHL;AA7BwB,CAAZ,CAAD,CAA5B;;AAoCA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAGvB,SAAS,EAAzB;AACA,QAAMwB,QAAQ,GAAG5B,WAAW,EAA5B;;AACA,QAAM6B,UAAU,GAAIC,KAAD,IAAW;AAC1BF,IAAAA,QAAQ,CAAC7B,WAAW,CAAC+B,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ,CAAR;AACH,GAFD;;AAGA,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,KAAwB;AACxC,QAAIA,OAAO,IAAID,KAAf,EAAuB;AACnB,0BACI;AAAA,kBACKA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ,GARD;;AASA,QAAME,WAAW,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,KAA4B;AAC5C,wBACI;AAAA,8BACI;AAAA,mBAAQD,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,sBAAWD;AAAX;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKJ,WAAW,CAACM,IAAD,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATD;;AAUA,QAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAC7Bf,IAAAA,KAAK,CAAC3B,WAAN,CAAkB0C,UAAlB;AACH,GAFD;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAK,CAACR,YAAlB,EAAgCQ,KAAK,CAACkB,MAAtC;AAEA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAEjB,OAAO,CAACrB,OAAxB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAEqB,OAAO,CAACjB,cAAxB;AAAA,+BACI;AAAM,UAAA,QAAQ,EAAEgB,KAAK,CAACmB,YAAN,CAAmBL,QAAnB,CAAhB;AAAA,kCACI,QAAC,KAAD;AACI,YAAA,IAAI,EAAC,cADT;AAEI,YAAA,SAAS,EAAEJ,WAFf;AAGI,YAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI,QAAC,KAAD;AACI,YAAA,IAAI,EAAC,gBADT;AAEI,YAAA,SAAS,EAAEA,WAFf;AAGI,YAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,kBANJ,eAWK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH,CAvFD;;GAAMX,O;UAKcrB,S,EACCJ,W;;;KANfyB,O;;AAyFN,MAAMqB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,IAAI,EAAED,KAAK,CAACE,IAAN,CAAWD,IADd;AAEHJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,IAAN,CAAWL;AAFhB,GAAP;AAIH,CALD;;AAOA,MAAMM,kBAAkB,GAAItB,QAAD,IAAc;AACrC,SAAO;AACH7B,IAAAA,WAAW,EAAE,CAACiD,IAAD,EAAOJ,MAAP,KAAkBhB,QAAQ,CAAC7B,WAAW,CAACiD,IAAD,EAAOJ,MAAP,CAAZ;AADpC,GAAP,CADqC,CAIrC;AACA;AACA;AACA;AACA;AACA;AACH,CAVD;;AAYA,MAAMO,WAAW,GAAGvD,OAAO,CACvBkD,eADuB,EAEvBI,kBAFuB,CAA3B;;AAKA,MAAME,QAAQ,GAAIX,UAAD,IAAgB;AAC7B,QAAMY,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACZ,UAAU,CAACvB,YAAhB,EAA8B;AAC1BmC,IAAAA,MAAM,CAACnC,YAAP,GAAsB,qBAAtB;AACH;;AAED,MAAI,CAACuB,UAAU,CAACpB,cAAhB,EAAgC;AAC5BgC,IAAAA,MAAM,CAAChC,cAAP,GAAwB,uBAAxB;AACH;;AAED,SAAOgC,MAAP;AACH,CAZD,C,CAcA;;;AACA,MAAMC,QAAQ,GAAGpD,SAAS,CAAC;AACvBqD,EAAAA,IAAI,EAAE,iBADiB;AAEvBH,EAAAA,QAAQ,EAAEA;AAFa,CAAD,CAAT,CAGd3B,OAHc,CAAjB;AAKA,eAAe7B,OAAO,CAAC,IAAD,EAAO;AAAEG,EAAAA;AAAF,CAAP,CAAP,CAA+BuD,QAA/B,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport Header from '../components/Header';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { addMovement } from '../actions/index';\nimport { useDispatch }  from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { ErrorSharp } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    addPage: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '100px'\n    },\n    addMovementDiv: {\n        background: '#C4C4C4',\n        fontFamily: 'PT Sans Caption',\n        fontSize: '18px',\n        borderRadius: '10px',\n        padding: '20px',\n        marginTop: '50px',\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'right',\n      },\n      movementName: {\n        padding: '10px',\n        margin: '10px',\n      },\n      textBoxColor: {\n        background: 'white',\n        borderRadius: '10px',\n      },\n      movementWeight: {\n        margin: '10px',\n        padding: '10px',\n      },\n      addButton: {\n          width: '50px',\n          borderRadius: '10px',\n          marginLeft: '95px'\n      },\n}));\n\nconst AddPage = (props) => {\n    //const [name, setName] = useState('');\n    //const [weight, setWeight] = useState(0);\n    // const name = useSelector(state => state.move.name);\n    // const weight = useSelector(state => state.move.weight);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const updateText = (event) => {\n        dispatch(addMovement(event.target.value))\n    };\n    const renderError = ({ error, touched }) => {\n        if (touched && error ) {\n            return (\n                <div>\n                    {error}\n                </div>\n            )\n        }\n    }\n    const renderInput = ({ input, label, meta }) => {\n        return (\n            <div>\n                <label>{label}:   </label>\n                <input {...input} /> \n                {renderError(meta)}\n            </div>\n            \n        )  \n    };\n    const onSubmit = (formValues) => {\n        props.addMovement(formValues);\n    }\n    \n\n    console.log(props.movementName, props.weight);\n\n    return (\n        <div>\n            <Header title=\"Add Page\" />\n            <div className={classes.addPage}>\n                <div className={classes.addMovementDiv}>\n                    <form onSubmit={props.handleSubmit(onSubmit)} >\n                        <Field \n                            name=\"movementName\" \n                            component={renderInput} \n                            label=\"Movement Name\" \n                        />\n                        <Field\n                            name=\"movementWeight\" \n                            component={renderInput} \n                            label=\"One Rep Max\" \n                         />\n                         <button>Submit</button>\n                    </form>\n                    {/* <TextField \n                        className={classes.movementName} \n                        value={props.name} \n                        label=\"Enter Movement Name\" \n                        InputProps= {{className: \"textBoxColor\"}}\n                        variant=\"outlined\"\n                        onChange={updateText()}\n                        \n                         \n                        \n                         />    \n                    <TextField \n                        className={classes.movementWeight} \n                        value={props.weight} \n                        label=\"Enter Movement Weight\" \n                        type=\"number\" \n                        variant=\"outlined\"\n                        onChange={updateText()}\n                        \n                        InputProps= {{endAdornment: <InputAdornment position=\"end\">lb</InputAdornment>, className: \"textBoxColor\"}}\n                    /> */}\n                    {/* <Link \n                        to={`/`}\n                        className={classes.addButton}\n                        variant=\"outlined\"\n                        onClick={() => dispatch(addMovement(props.name, props.weight))}\n                        >\n                        Submit\n                    </Link> */}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        name: state.move.name,\n        weight: state.move.weight,   \n    }   \n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return({\n        addMovement: (name, weight) => dispatch(addMovement(name, weight)),\n    })\n    // return {\n    //     moveChanged: (e) => {\n    //         const action = { type: ADD_MOVEMENT, name: e.target.value, weight: e.target.value };\n    //         dispatch(action);\n    //     }\n    // }\n};\n\nconst withConnect = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n);\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.movementName) {\n        errors.movementName = \"Please enter a Name\";\n    }\n\n    if (!formValues.movementWeight) {\n        errors.movementWeight = \"Please enter a Weight\";\n    }\n\n    return errors;\n};\n\n// export default compose(withConnect)(AddPage);\nconst formWrap = reduxForm({\n    form: 'addMovementForm',\n    validate: validate,\n})(AddPage);\n\nexport default connect(null, { addMovement })(formWrap);"]},"metadata":{},"sourceType":"module"}